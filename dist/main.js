(()=>{"use strict";class e{content=document.querySelector("#content");mainContentContainer=document.querySelector(".main-content-container");todoscontainer=document.querySelector(".todos-container");constructor(){}loadTodos(e){let t=0;this.todoscontainer.innerHTML="";for(const n of e){const e=document.createElement("div");e.classList.add("todo-container"),e.setAttribute("data-todo-index",t),!0===n.complete&&e.classList.add("completed"),t++;const c=document.createElement("h2");c.classList.add("todo-title"),c.textContent=n.title;const s=document.createElement("p");s.classList.add("todo-description"),s.textContent=n.description;const d=document.createElement("p");d.classList.add("todo-date"),d.innerHTML=`<span class="due-date-label">Due Date: </span> ${n.dueDate.slice(5,7)}/${n.dueDate.slice(8,11)}/${n.dueDate.slice(0,4)}`;const a=document.createElement("p");a.classList.add("todo-time"),""!==n.time?a.innerHTML='<span class="due-time-label">Time Due: </span>'+(0==+(o=n.time).slice(0,2)?`${+o.slice(0,2)+12}:${o.slice(3,5)} AM`:+o.slice(0,2)<12?o+" AM":12==+o.slice(0,2)?`${o.slice(0,2)}:${o.slice(3,5)} PM`:`${+o.slice(0,2)-12}:${o.slice(3,5)} PM`):a.innerHTML='<span class="due-time-label">Time Due: </span> No Time Set';const i=document.createElement("p");i.classList.add("todo-project-name"),i.innerHTML=`<span class="due-date-label">Project Name: </span> ${n.projectName}`;const l=document.createElement("button");l.setAttribute("type","button"),l.classList.add("complete-button"),!0===n.complete&&l.classList.add("completed"),!1===n.complete?l.textContent="Not Completed":l.textContent="Completed";const r=document.createElement("div");r.classList.add("todo-options"),r.innerHTML='<span class="material-symbols-outlined todo-options-icon">more_vert</span>';const m=document.createElement("div"),u=document.createElement("div");u.textContent="Remove",u.classList.add("remove-todo"),m.classList.add("todo-options-container","hidden"),m.append(u),r.append(m),e.append(c,s,d,a,i,l,r),this.todoscontainer.append(e)}var o}addCompletionButtonEvent(e){const t=document.querySelectorAll(".complete-button");for(const o of t)o.addEventListener("click",(t=>{o.classList.contains("completed")?(o.classList.remove("completed"),o.textContent="Not Completed",t.target.parentNode.classList.remove("completed"),e[t.target.parentNode.getAttribute("data-todo-index")].complete=!1):(o.classList.add("completed"),t.target.parentNode.classList.add("completed"),o.textContent="Completed",e[t.target.parentNode.getAttribute("data-todo-index")].complete=!0)}))}showTodoOptions(){const e=document.querySelectorAll(".todo-options-icon");for(const t of e)t.addEventListener("click",(e=>{const t=e.target.parentNode;console.log(t);const o=t.querySelector(".todo-options-container");o.classList.contains("hidden")?o.classList.remove("hidden"):o.classList.add("hidden")}))}}class t{constructor(e,t,o,n,c,s){this.title=e,this.description=t,this.dueDate=o,this.time=n,this.complete=c,this.projectName=s}}const o=new class{content=document.querySelector("#content");nav=document.querySelector(".navbar");constructor(){this.mainContent=new e}dimBackground(){this.nav.style.filter="brightness(50%)",this.mainContent.mainContentContainer.style.filter="brightness(50%)"}unDimBackground(){this.nav.removeAttribute("style"),this.mainContent.mainContentContainer.removeAttribute("style")}},n=new class{content=document.querySelector("#content");modalContainer=document.querySelector(".new-todo-container");constructor(){}toggleModalVisibility(){this.modalContainer.classList.toggle("hidden")}openModal(e){e.stopPropagation(),this.toggleModalVisibility()}closeModal(e){let t=e.target,o=!0;if(!e.target.classList.contains("submit-todo-button"))for(;t&&"BODY"!==t.nodeName;){if(t.classList.contains("new-todo-container")){o=!1;break}t=t.parentNode}return o&&!this.modalContainer.classList.contains("hidden")&&this.modalContainer.classList.toggle("hidden"),o}loadModalContent(){const e=document.querySelector("#tododate"),t=function(){const e=new Date,t=e.getFullYear(),o=e.getDate();let n=e.getMonth()+1;return n.toString.length<2&&(n="0"+n),{year:t,month:n,day:o}}();e.setAttribute({min:`${t.year}-${t.month}-${t.day}`,required:!0})}clearModalContent(){document.querySelector("#todoname").value="",document.querySelector("#tododescription").value="",document.querySelector("#tododate").value="",document.querySelector("#todotime").value="",document.querySelector("#project-name").value=""}},c=new class{content=document.querySelector("#content");mainContainer=document.querySelector(".main-content-container");todosContainer=document.querySelector(".todos-container");projectTitle=document.createElement("h1");projectsList=[];constructor(){this.projects=[]}loadTitle(){this.projectTitle.classList.add("project-title"),this.projectTitle.textContent="Projects",this.mainContainer.insertAdjacentElement("afterbegin",this.projectTitle)}loadProjectContainers(){for(const e of this.projectsList){const t=document.createElement("div");t.classList.add("project-container"),t.setAttribute("data-project-name",e),this.todosContainer.append(t)}}loadTodosForProject(e){let t=0;for(const o of e){const e=document.createElement("div");e.classList.add("todo-container"),e.setAttribute("data-todo-index",t),!0===o.complete&&e.classList.add("completed"),t++;const n=document.createElement("h2");n.classList.add("todo-title"),n.textContent=o.title;const c=document.createElement("p");c.classList.add("todo-description"),c.textContent=o.description;const s=document.createElement("p");s.classList.add("todo-date"),s.innerHTML=`<span class="due-date-label">Due Date: </span> ${o.dueDate.slice(5,7)}/${o.dueDate.slice(8,11)}/${o.dueDate.slice(0,4)}`;const d=document.createElement("p");d.classList.add("todo-time"),""!==o.time?d.innerHTML=`<span class="due-time-label">Time Due: </span>${formatTime(o.time)}`:d.innerHTML='<span class="due-time-label">Time Due: </span> No Time Set';const a=document.createElement("p");a.classList.add("todo-project-name"),a.innerHTML=`<span class="due-date-label">Project Name: </span> ${o.projectName}`;const i=document.createElement("button");i.setAttribute("type","button"),i.classList.add("complete-button"),!0===o.complete&&i.classList.add("completed"),!1===o.complete?i.textContent="Not Completed":i.textContent="Completed";const l=document.createElement("div");l.classList.add("todo-options"),l.innerHTML='<span class="material-symbols-outlined todo-options-icon">more_vert</span>';const r=document.createElement("div"),m=document.createElement("div");m.textContent="Remove",m.classList.add("remove-todo"),r.classList.add("todo-options-container","hidden"),r.append(m),l.append(r),e.append(n,c,s,d,a,i,l),this.addTodosToProjectContainers(o.projectName,e)}}addTodosToProjectContainers(e,t){const o=document.querySelectorAll(".project-container");for(const n of o)e===n.getAttribute("data-project-name")&&n.append(t)}},s=[],d=document.querySelector(".todos-container"),a=document.querySelector(".new-todo-container"),i=document.querySelector(".add-todo-button"),l=document.querySelector(".submit-todo-button"),r=document.querySelector(".projects"),m=document.querySelector("#project-selection"),u=document.querySelector(".home");function p(){const e=document.querySelector(".project-name-container"),t=document.querySelector("#project-name");"New Project"===m.value?(e.classList.contains("hidden")&&e.classList.remove("hidden"),t.value=""):e.classList.contains("hidden")||e.classList.add("hidden")}function L(){const e=document.querySelectorAll(".remove-todo");for(const t of e)t.addEventListener("click",(e=>{const t=+e.target.parentNode.parentNode.parentNode.getAttribute("data-todo-index");s.splice(t,1),o.mainContent.loadTodos(s),y(),v(s),L()}))}function v(e){const t=document.querySelectorAll(".complete-button");for(const o of t)o.addEventListener("click",(t=>{o.classList.contains("completed")?(o.classList.remove("completed"),o.textContent="Not Completed",t.target.parentNode.classList.remove("completed"),e[t.target.parentNode.getAttribute("data-todo-index")].complete=!1):(o.classList.add("completed"),t.target.parentNode.classList.add("completed"),o.textContent="Completed",e[t.target.parentNode.getAttribute("data-todo-index")].complete=!0)}))}function y(){const e=document.querySelectorAll(".todo-options-icon");for(const t of e)t.addEventListener("click",(e=>{const t=e.target.parentNode.querySelector(".todo-options-container");t.classList.contains("hidden")?t.classList.remove("hidden"):t.classList.add("hidden")}))}i.addEventListener("click",(e=>{a.classList.contains("hidden")&&(n.openModal(e),n.clearModalContent(),o.dimBackground(),m.value="none",p())})),window.addEventListener("click",(e=>{n.closeModal(e)&&o.unDimBackground()})),u.addEventListener("click",(()=>{o.mainContent.loadTodos(s),r.classList.remove("button-selected"),u.classList.add("button-selected"),y(),v(s),L(),null!==document.querySelector(".project-title")&&document.querySelector(".project-title").remove()})),r.addEventListener("click",(()=>{d.innerHTML="",u.classList.remove("button-selected"),r.classList.add("button-selected");const e=s.filter((e=>"None"!==e.projectName));c.loadProjectContainers(),c.loadTitle(),c.loadTodosForProject(e)})),m.addEventListener("change",(()=>{p()})),l.addEventListener("click",(e=>{if(document.querySelector("form").checkValidity()){e.preventDefault();const d=document.querySelector("#todoname").value,a=document.querySelector("#tododescription").value,i=document.querySelector("#tododate").value,l=document.querySelector("#todotime").value;let r=document.querySelector("#project-name").value;""===r&&(r="None");const m=new t(d,a,i,l,!1,r);if(s.push(m),c.projectsList.includes(r)||"None"===r||c.projectsList.push(r),console.log(s),n.closeModal(e),o.dimBackground(),u.classList.contains("button-selected"))o.mainContent.loadTodos(s),v(s);else{const e=s.filter((e=>"None"!==e.projectName));o.mainContent.loadTodos(e),v(e)}y(),L()}else document.querySelector("form").reportValidity(),e.stopPropagation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FDckJZLEVBQWNHLGdCQUNWa0QsRUFBVzNGLFVBQVUyQixTQUFTLG1CQUM5QlcsRUFBY0UsWUFBWWhELFVBQVU4RixHQUNwQ2pFLEVBQXlCaUUsT0FFeEIsQ0FDRCxNQUFNYSxFQUFlYixFQUFVM0MsUUFBT3lELEdBQXVCLFNBQWxCQSxFQUFFckYsY0FDN0N1QixFQUFjRSxZQUFZaEQsVUFBVTJHLEdBQ3BDOUUsRUFBeUI4RSxFQUM3QixDQUNBbkUsSUFDQThELEdBR0osTUE5QkkzRyxTQUFTQyxjQUFjLFFBQVFxSCxpQkFDL0IvRSxFQUFFeUIsaUJBNkJOLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3Qtb2RpbnByb2plY3QvLi9zcmMvbG9hZGhvbWUuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LW9kaW5wcm9qZWN0Ly4vc3JjL3Rhc2tzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1vZGlucHJvamVjdC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qtb2RpbnByb2plY3QvLi9zcmMvdG9kb21vZGFsLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1vZGlucHJvamVjdC8uL3NyYy9wcm9qZWN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBMYW5kaW5nUGFnZSB7XG4gICAgY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb250ZW50Jyk7XG4gICAgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmJhcicpO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1haW5Db250ZW50ID0gbmV3IE1haW5Db250ZW50O1xuICAgIH1cblxuICAgIGRpbUJhY2tncm91bmQoKSB7XG4gICAgICAgIHRoaXMubmF2LnN0eWxlLmZpbHRlciA9ICdicmlnaHRuZXNzKDUwJSknO1xuICAgICAgICB0aGlzLm1haW5Db250ZW50Lm1haW5Db250ZW50Q29udGFpbmVyLnN0eWxlLmZpbHRlciA9ICdicmlnaHRuZXNzKDUwJSknO1xuICAgIH1cblxuICAgIHVuRGltQmFja2dyb3VuZCgpIHtcbiAgICAgICAgdGhpcy5uYXYucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB0aGlzLm1haW5Db250ZW50Lm1haW5Db250ZW50Q29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICB9XG5cbn1cblxuXG5jbGFzcyBNYWluQ29udGVudCB7XG4gICAgY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb250ZW50Jyk7XG4gICAgbWFpbkNvbnRlbnRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi1jb250ZW50LWNvbnRhaW5lcicpO1xuICAgIHRvZG9zY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZG9zLWNvbnRhaW5lcicpO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxuXG5cbiAgICBsb2FkVG9kb3MoYXJyKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgdGhpcy50b2Rvc2NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgZm9yIChjb25zdCB0b2RvIG9mIGFycikge1xuICAgICAgICAgICAgY29uc3QgdG9kb0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdG9kb0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd0b2RvLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgdG9kb0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9kby1pbmRleCcsIGkpO1xuICAgICAgICAgICAgaWYgKHRvZG8uY29tcGxldGUgPT09IHRydWUpIHRvZG9Db250YWluZXIuY2xhc3NMaXN0LmFkZCgnY29tcGxldGVkJyk7XG4gICAgICAgICAgICBpKytcbiAgICAgICAgICAgIC8vdGl0bGVcbiAgICAgICAgICAgIGNvbnN0IHRvZG9UaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gICAgICAgICAgICB0b2RvVGl0bGUuY2xhc3NMaXN0LmFkZCgndG9kby10aXRsZScpO1xuICAgICAgICAgICAgdG9kb1RpdGxlLnRleHRDb250ZW50ID0gdG9kby50aXRsZTtcblxuICAgICAgICAgICAgLy9kZXNjcmlwdGlvblxuICAgICAgICAgICAgY29uc3QgdG9kb0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgdG9kb0Rlc2NyaXB0aW9uLmNsYXNzTGlzdC5hZGQoJ3RvZG8tZGVzY3JpcHRpb24nKTtcbiAgICAgICAgICAgIHRvZG9EZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IHRvZG8uZGVzY3JpcHRpb247XG5cbiAgICAgICAgICAgIC8vZGF0ZVxuICAgICAgICAgICAgY29uc3QgdG9kb0RhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICB0b2RvRGF0ZS5jbGFzc0xpc3QuYWRkKCd0b2RvLWRhdGUnKTtcbiAgICAgICAgICAgIHRvZG9EYXRlLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cImR1ZS1kYXRlLWxhYmVsXCI+RHVlIERhdGU6IDwvc3Bhbj4gJHt0b2RvLmR1ZURhdGUuc2xpY2UoNSwgNyl9LyR7dG9kby5kdWVEYXRlLnNsaWNlKDgsIDExKX0vJHt0b2RvLmR1ZURhdGUuc2xpY2UoMCwgNCl9YDtcblxuICAgICAgICAgICAgLy90aW1lXG4gICAgICAgICAgICBjb25zdCB0b2RvVGltZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIHRvZG9UaW1lLmNsYXNzTGlzdC5hZGQoJ3RvZG8tdGltZScpO1xuICAgICAgICAgICAgaWYgKHRvZG8udGltZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICB0b2RvVGltZS5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJkdWUtdGltZS1sYWJlbFwiPlRpbWUgRHVlOiA8L3NwYW4+JHtmb3JtYXRUaW1lKHRvZG8udGltZSl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvZG9UaW1lLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cImR1ZS10aW1lLWxhYmVsXCI+VGltZSBEdWU6IDwvc3Bhbj4gTm8gVGltZSBTZXRgO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3Byb2plY3Qgc2VsZWN0aW9uXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKVxuICAgICAgICAgICAgcHJvamVjdHMuY2xhc3NMaXN0LmFkZCgndG9kby1wcm9qZWN0LW5hbWUnKTtcbiAgICAgICAgICAgIHByb2plY3RzLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cImR1ZS1kYXRlLWxhYmVsXCI+UHJvamVjdCBOYW1lOiA8L3NwYW4+ICR7dG9kby5wcm9qZWN0TmFtZX1gO1xuXG5cblxuICAgICAgICAgICAgLy9jb21wbGV0aW9uIGJ1dHRvblxuICAgICAgICAgICAgY29uc3QgY29tcGxldGVkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICBjb21wbGV0ZWQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpXG4gICAgICAgICAgICBjb21wbGV0ZWQuY2xhc3NMaXN0LmFkZCgnY29tcGxldGUtYnV0dG9uJyk7XG4gICAgICAgICAgICBpZiAodG9kby5jb21wbGV0ZSA9PT0gdHJ1ZSkgY29tcGxldGVkLmNsYXNzTGlzdC5hZGQoJ2NvbXBsZXRlZCcpO1xuICAgICAgICAgICAgKHRvZG8uY29tcGxldGUgPT09IGZhbHNlKSA/IGNvbXBsZXRlZC50ZXh0Q29udGVudCA9ICdOb3QgQ29tcGxldGVkJyA6IGNvbXBsZXRlZC50ZXh0Q29udGVudCA9ICdDb21wbGV0ZWQnO1xuXG4gICAgICAgICAgICAvL29wdGlvbnMgbWVudVxuICAgICAgICAgICAgY29uc3Qgb3B0aW9uc01lbnVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG9wdGlvbnNNZW51Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3RvZG8tb3B0aW9ucycpO1xuICAgICAgICAgICAgb3B0aW9uc01lbnVDb250YWluZXIuaW5uZXJIVE1MID0gJzxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCB0b2RvLW9wdGlvbnMtaWNvblwiPm1vcmVfdmVydDwvc3Bhbj4nO1xuXG4gICAgICAgICAgICAvL29wdGlvbnNcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZVRvZG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHJlbW92ZVRvZG8udGV4dENvbnRlbnQgPSAnUmVtb3ZlJztcbiAgICAgICAgICAgIHJlbW92ZVRvZG8uY2xhc3NMaXN0LmFkZCgncmVtb3ZlLXRvZG8nKTtcbiAgICAgICAgICAgIG9wdGlvbnNDb250YWluZXIuY2xhc3NMaXN0LmFkZCgndG9kby1vcHRpb25zLWNvbnRhaW5lcicsICdoaWRkZW4nKTtcbiAgICAgICAgICAgIG9wdGlvbnNDb250YWluZXIuYXBwZW5kKHJlbW92ZVRvZG8pO1xuXG5cblxuICAgICAgICAgICAgb3B0aW9uc01lbnVDb250YWluZXIuYXBwZW5kKG9wdGlvbnNDb250YWluZXIpO1xuICAgICAgICAgICAgdG9kb0NvbnRhaW5lci5hcHBlbmQodG9kb1RpdGxlLCB0b2RvRGVzY3JpcHRpb24sIHRvZG9EYXRlLCB0b2RvVGltZSwgcHJvamVjdHMsIGNvbXBsZXRlZCwgb3B0aW9uc01lbnVDb250YWluZXIpO1xuICAgICAgICAgICAgdGhpcy50b2Rvc2NvbnRhaW5lci5hcHBlbmQodG9kb0NvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRDb21wbGV0aW9uQnV0dG9uRXZlbnQoYXJyKSB7XG4gICAgICAgIGNvbnN0IGNvbXBsZXRpb25CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29tcGxldGUtYnV0dG9uJyk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGNvbXBsZXRpb25CdXR0b24pIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ2NvbXBsZXRlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdjb21wbGV0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gJ05vdCBDb21wbGV0ZWQnXG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnY29tcGxldGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGFycltlLnRhcmdldC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS10b2RvLWluZGV4JyldLmNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnY29tcGxldGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnY29tcGxldGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9ICdDb21wbGV0ZWQnO1xuICAgICAgICAgICAgICAgICAgICBhcnJbZS50YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9kby1pbmRleCcpXS5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93VG9kb09wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHRvZG9PcHRpb25CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG9kby1vcHRpb25zLWljb24nKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdG9kb09wdGlvbkJ1dHRvbikge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b2RvID0gZS50YXJnZXQucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0b2RvKVxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0b2RvLnF1ZXJ5U2VsZWN0b3IoJy50b2RvLW9wdGlvbnMtY29udGFpbmVyJyk7XG4gICAgICAgICAgICAgICAgKG9wdGlvbnMuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4nKSkgPyBvcHRpb25zLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpIDogb3B0aW9ucy5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWUodGltZSkge1xuICAgIGlmICgrdGltZS5zbGljZSgwLCAyKSA9PT0gMCkgcmV0dXJuIChgJHsrdGltZS5zbGljZSgwLCAyKSArIDEyfToke3RpbWUuc2xpY2UoMywgNSl9IEFNYCk7XG4gICAgZWxzZSBpZiAoK3RpbWUuc2xpY2UoMCwgMikgPCAxMikgcmV0dXJuICh0aW1lICs9ICcgQU0nKTtcbiAgICBlbHNlIGlmICgrdGltZS5zbGljZSgwLCAyKSA9PT0gMTIpIHJldHVybiAoYCR7dGltZS5zbGljZSgwLCAyKX06JHt0aW1lLnNsaWNlKDMsIDUpfSBQTWApO1xuICAgIGVsc2UgcmV0dXJuIChgJHsrdGltZS5zbGljZSgwLCAyKSAtIDEyfToke3RpbWUuc2xpY2UoMywgNSl9IFBNYCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9EbyB7XG4gICAgY29uc3RydWN0b3IgKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgdGltZSwgY29tcGxldGUsIHByb2plY3ROYW1lKSB7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgICAgICB0aGlzLmNvbXBsZXRlID0gY29tcGxldGU7XG4gICAgICAgIHRoaXMucHJvamVjdE5hbWUgPSBwcm9qZWN0TmFtZTtcbiAgICB9XG59IiwiaW1wb3J0IHsgZGVmYXVsdCBhcyBMYW5kaW5nUGFnZSB9IGZyb20gXCIuL2xvYWRob21lLmpzXCI7XG5pbXBvcnQgUHJvamVjdHNQYWdlIGZyb20gXCIuL3Byb2plY3RzLmpzXCI7XG5pbXBvcnQgVG9EbyBmcm9tIFwiLi90YXNrcy5qc1wiO1xuaW1wb3J0IFRvRG9Nb2RhbCBmcm9tIFwiLi90b2RvbW9kYWwuanNcIjtcblxuXG5jb25zdCBsYW5kaW5nTG9hZGVyID0gbmV3IExhbmRpbmdQYWdlKCk7XG5jb25zdCB0b2RvbW9kYWwgPSBuZXcgVG9Eb01vZGFsKCk7XG5jb25zdCBwcm9qZWN0cyA9IG5ldyBQcm9qZWN0c1BhZ2UoKTtcbmNvbnN0IHRvZG9zTGlzdCA9IFtdO1xuY29uc3QgdG9kb0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2Rvcy1jb250YWluZXInKTtcbmNvbnN0IG1vZGFsQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ldy10b2RvLWNvbnRhaW5lcicpO1xuY29uc3QgbmV3VG9kb0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdG9kby1idXR0b24nKTtcbmNvbnN0IHN1Ym1pdFRvZG9CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3VibWl0LXRvZG8tYnV0dG9uJyk7XG5jb25zdCBwcm9qZWN0c0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0cycpO1xuY29uc3QgcHJvamVjdFNlbGVjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0LXNlbGVjdGlvbicpO1xuY29uc3QgaG9tZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lJyk7XG5cbi8vcmVzZXRzIGh0bWwgc2VsZWN0IGZvciBuZXd0b2RvIHByb2plY3Qgc2VsZWN0aW9uXG5mdW5jdGlvbiByZXNldE5ld1RvZG9Qcm9qZWN0U2VsZWN0aW9uKCkge1xuICAgIGNvbnN0IHByb2plY3ROYW1lQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbmFtZS1jb250YWluZXInKTtcbiAgICBjb25zdCBwcm9qZWN0VGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdC1uYW1lJylcbiAgICBpZiAocHJvamVjdFNlbGVjdGlvbi52YWx1ZSA9PT0gJ05ldyBQcm9qZWN0Jykge1xuICAgICAgICBpZiAocHJvamVjdE5hbWVDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4nKSkgcHJvamVjdE5hbWVDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIHByb2plY3RUaXRsZS52YWx1ZSA9ICcnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFwcm9qZWN0TmFtZUNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKSBwcm9qZWN0TmFtZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICB9XG59XG4vL2V2ZW50IGxpc3RlbmVyc1xuLy9vcGVucyB0aGUgYWRkIG5ldyB0b2RvIG1vZGFsXG5uZXdUb2RvQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBpZiAobW9kYWxDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4nKSkge1xuICAgICAgICB0b2RvbW9kYWwub3Blbk1vZGFsKGUpO1xuICAgICAgICB0b2RvbW9kYWwuY2xlYXJNb2RhbENvbnRlbnQoKTtcbiAgICAgICAgbGFuZGluZ0xvYWRlci5kaW1CYWNrZ3JvdW5kKCk7XG4gICAgICAgIC8vcmVzZXRzIGRlZmF1bHQgcHJvamVjdCBzZWxlY3Rpb25cbiAgICAgICAgcHJvamVjdFNlbGVjdGlvbi52YWx1ZSA9ICdub25lJztcbiAgICAgICAgcmVzZXROZXdUb2RvUHJvamVjdFNlbGVjdGlvbigpO1xuICAgIH1cbn0pO1xuXG5cbi8vY2xvc2VzIGFkZCBuZXcgdG9kbyBtb2RhbFxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBjb25zdCBjbG9zZWQgPSB0b2RvbW9kYWwuY2xvc2VNb2RhbChlKTtcbiAgICBpZiAoY2xvc2VkKSBsYW5kaW5nTG9hZGVyLnVuRGltQmFja2dyb3VuZCgpO1xuXG59KVxuXG5ob21lQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGxhbmRpbmdMb2FkZXIubWFpbkNvbnRlbnQubG9hZFRvZG9zKHRvZG9zTGlzdCk7XG4gICAgcHJvamVjdHNCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYnV0dG9uLXNlbGVjdGVkJyk7XG4gICAgaG9tZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdidXR0b24tc2VsZWN0ZWQnKTtcbiAgICBzaG93VG9kb09wdGlvbnMoKTtcbiAgICBhZGRDb21wbGV0aW9uQnV0dG9uRXZlbnQodG9kb3NMaXN0KTtcbiAgICBhZGRSZW1vdmVUb2RvTGlzdGVuZXIoKTtcbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtdGl0bGUnKSAhPT0gbnVsbCkgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtdGl0bGUnKS5yZW1vdmUoKTtcbn0pXG5cbnByb2plY3RzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIHRvZG9Db250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgaG9tZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdidXR0b24tc2VsZWN0ZWQnKTtcbiAgICBwcm9qZWN0c0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdidXR0b24tc2VsZWN0ZWQnKTtcbiAgICBjb25zdCBwcm9qZWN0VG9kb3MgPSB0b2Rvc0xpc3QuZmlsdGVyKGEgPT4gYS5wcm9qZWN0TmFtZSAhPT0gJ05vbmUnKTtcbiAgICBwcm9qZWN0cy5sb2FkUHJvamVjdENvbnRhaW5lcnMoKTtcbiAgICBwcm9qZWN0cy5sb2FkVGl0bGUoKTtcbiAgICBwcm9qZWN0cy5sb2FkVG9kb3NGb3JQcm9qZWN0KHByb2plY3RUb2Rvcyk7XG59KVxuXG5wcm9qZWN0U2VsZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICByZXNldE5ld1RvZG9Qcm9qZWN0U2VsZWN0aW9uKCk7XG59KVxuXG5zdWJtaXRUb2RvQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBsZXQgaXNGb3JtVmFsaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtJykuY2hlY2tWYWxpZGl0eSgpO1xuICAgIGlmICghaXNGb3JtVmFsaWQpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9ybScpLnJlcG9ydFZhbGlkaXR5KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHRvZG9UaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b2RvbmFtZScpLnZhbHVlO1xuICAgICAgICBjb25zdCB0b2RvRGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9kb2Rlc2NyaXB0aW9uJykudmFsdWU7XG4gICAgICAgIGNvbnN0IHRvZG9EYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RvZG9kYXRlJykudmFsdWU7XG4gICAgICAgIGNvbnN0IHRvZG9UaW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RvZG90aW1lJykudmFsdWU7XG4gICAgICAgIGxldCBwcm9qZWN0TmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0LW5hbWUnKS52YWx1ZTtcbiAgICAgICAgKHByb2plY3ROYW1lID09PSAnJykgPyBwcm9qZWN0TmFtZSA9ICdOb25lJyA6IHByb2plY3ROYW1lID0gcHJvamVjdE5hbWU7XG4gICAgICAgIGNvbnN0IHRvZG8gPSBuZXcgVG9Ebyh0b2RvVGl0bGUsIHRvZG9EZXNjcmlwdGlvbiwgdG9kb0RhdGUsIHRvZG9UaW1lLCBmYWxzZSwgcHJvamVjdE5hbWUpO1xuICAgICAgICB0b2Rvc0xpc3QucHVzaCh0b2RvKTtcbiAgICAgICAgaWYgKCFwcm9qZWN0cy5wcm9qZWN0c0xpc3QuaW5jbHVkZXMocHJvamVjdE5hbWUpICYmIHByb2plY3ROYW1lICE9PSAnTm9uZScpIHByb2plY3RzLnByb2plY3RzTGlzdC5wdXNoKHByb2plY3ROYW1lKTtcbiAgICAgICAgY29uc29sZS5sb2codG9kb3NMaXN0KVxuICAgICAgICB0b2RvbW9kYWwuY2xvc2VNb2RhbChlKTtcbiAgICAgICAgbGFuZGluZ0xvYWRlci5kaW1CYWNrZ3JvdW5kKCk7XG4gICAgICAgIGlmIChob21lQnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnYnV0dG9uLXNlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIGxhbmRpbmdMb2FkZXIubWFpbkNvbnRlbnQubG9hZFRvZG9zKHRvZG9zTGlzdCk7XG4gICAgICAgICAgICBhZGRDb21wbGV0aW9uQnV0dG9uRXZlbnQodG9kb3NMaXN0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RUb2RvcyA9IHRvZG9zTGlzdC5maWx0ZXIoYSA9PiBhLnByb2plY3ROYW1lICE9PSAnTm9uZScpO1xuICAgICAgICAgICAgbGFuZGluZ0xvYWRlci5tYWluQ29udGVudC5sb2FkVG9kb3MocHJvamVjdFRvZG9zKTtcbiAgICAgICAgICAgIGFkZENvbXBsZXRpb25CdXR0b25FdmVudChwcm9qZWN0VG9kb3MpO1xuICAgICAgICB9XG4gICAgICAgIHNob3dUb2RvT3B0aW9ucygpO1xuICAgICAgICBhZGRSZW1vdmVUb2RvTGlzdGVuZXIoKTtcblxuXG4gICAgfVxufSlcblxuXG5cbmZ1bmN0aW9uIGFkZFJlbW92ZVRvZG9MaXN0ZW5lcigpIHtcbiAgICBjb25zdCByZW1vdmVCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJlbW92ZS10b2RvJyk7XG4gICAgZm9yIChjb25zdCBidXR0b24gb2YgcmVtb3ZlQnV0dG9ucykge1xuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG9kb0NvbnRhaW5lciA9IGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgY29uc3QgdG9kb2luZGV4ID0gK3RvZG9Db250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLXRvZG8taW5kZXgnKTtcbiAgICAgICAgICAgIHRvZG9zTGlzdC5zcGxpY2UodG9kb2luZGV4LCAxKTtcbiAgICAgICAgICAgIGxhbmRpbmdMb2FkZXIubWFpbkNvbnRlbnQubG9hZFRvZG9zKHRvZG9zTGlzdCk7XG4gICAgICAgICAgICBzaG93VG9kb09wdGlvbnMoKTtcbiAgICAgICAgICAgIGFkZENvbXBsZXRpb25CdXR0b25FdmVudCh0b2Rvc0xpc3QpO1xuICAgICAgICAgICAgYWRkUmVtb3ZlVG9kb0xpc3RlbmVyKCk7XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGFkZENvbXBsZXRpb25CdXR0b25FdmVudChhcnIpIHtcbiAgICBjb25zdCBjb21wbGV0aW9uQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbXBsZXRlLWJ1dHRvbicpO1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGNvbXBsZXRpb25CdXR0b24pIHtcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdjb21wbGV0ZWQnKSkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdjb21wbGV0ZWQnKTtcbiAgICAgICAgICAgICAgICBidXR0b24udGV4dENvbnRlbnQgPSAnTm90IENvbXBsZXRlZCdcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2NvbXBsZXRlZCcpO1xuICAgICAgICAgICAgICAgIGFycltlLnRhcmdldC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS10b2RvLWluZGV4JyldLmNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnY29tcGxldGVkJyk7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdjb21wbGV0ZWQnKTtcbiAgICAgICAgICAgICAgICBidXR0b24udGV4dENvbnRlbnQgPSAnQ29tcGxldGVkJztcbiAgICAgICAgICAgICAgICBhcnJbZS50YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9kby1pbmRleCcpXS5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgIH1cbn1cblxuZnVuY3Rpb24gc2hvd1RvZG9PcHRpb25zKCkge1xuICAgIGNvbnN0IHRvZG9PcHRpb25CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG9kby1vcHRpb25zLWljb24nKTtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0b2RvT3B0aW9uQnV0dG9uKSB7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b2RvID0gZS50YXJnZXQucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0b2RvLnF1ZXJ5U2VsZWN0b3IoJy50b2RvLW9wdGlvbnMtY29udGFpbmVyJyk7XG4gICAgICAgICAgICAob3B0aW9ucy5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKSA/IG9wdGlvbnMuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJykgOiBvcHRpb25zLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICB9KVxuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUb0RvTW9kYWwge1xuICAgIGNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpO1xuICAgIG1vZGFsQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ldy10b2RvLWNvbnRhaW5lcicpO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxuXG4gICAgdG9nZ2xlTW9kYWxWaXNpYmlsaXR5KCkge1xuICAgICAgICB0aGlzLm1vZGFsQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xuICAgIH1cblxuICAgIG9wZW5Nb2RhbChlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMudG9nZ2xlTW9kYWxWaXNpYmlsaXR5KCk7XG4gICAgfVxuXG4gICAgY2xvc2VNb2RhbChlKSB7XG4gICAgICAgIGxldCByZXZpZXdOb2RlID0gZS50YXJnZXQ7XG4gICAgICAgIGxldCBleGl0Rm9ybSA9IHRydWU7XG4gICAgICAgIGlmICghZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzdWJtaXQtdG9kby1idXR0b24nKSkge1xuICAgICAgICAgICAgd2hpbGUgKHJldmlld05vZGUgJiYgcmV2aWV3Tm9kZS5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJldmlld05vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCduZXctdG9kby1jb250YWluZXInKSkge1xuICAgICAgICAgICAgICAgICAgICBleGl0Rm9ybSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV2aWV3Tm9kZSA9IHJldmlld05vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhpdEZvcm0gJiYgIXRoaXMubW9kYWxDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4nKSkge1xuICAgICAgICAgICAgdGhpcy5tb2RhbENvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBleGl0Rm9ybTtcbiAgICB9XG5cbiAgICBsb2FkTW9kYWxDb250ZW50KCkge1xuICAgICAgICAvL2RhdGVcbiAgICAgICAgY29uc3QgdGFza0RhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9kb2RhdGUnKTtcbiAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBnZXRDdXJyZW50RGF0ZSgpO1xuICAgICAgICB0YXNrRGF0ZS5zZXRBdHRyaWJ1dGUoeydtaW4nOiBgJHtjdXJyZW50RGF0ZS55ZWFyfS0ke2N1cnJlbnREYXRlLm1vbnRofS0ke2N1cnJlbnREYXRlLmRheX1gLCAncmVxdWlyZWQnOiB0cnVlfSlcblxuICAgIH1cblxuICAgIGNsZWFyTW9kYWxDb250ZW50KCkge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9kb25hbWUnKS52YWx1ZSA9ICcnO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9kb2Rlc2NyaXB0aW9uJykudmFsdWUgPSAnJztcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RvZG9kYXRlJykudmFsdWUgPSAnJztcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RvZG90aW1lJykudmFsdWUgPSAnJztcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Byb2plY3QtbmFtZScpLnZhbHVlID0gJyc7XG5cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnREYXRlKCkge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgbGV0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTtcbiAgICBpZiAobW9udGgudG9TdHJpbmcubGVuZ3RoIDwgMikgbW9udGggPSAnMCcgKyBtb250aDtcbiAgICByZXR1cm4geyB5ZWFyLCBtb250aCwgZGF5IH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9qZWN0c1BhZ2Uge1xuICAgIGNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpO1xuICAgIG1haW5Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi1jb250ZW50LWNvbnRhaW5lcicpO1xuICAgIHRvZG9zQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZG9zLWNvbnRhaW5lcicpO1xuICAgIHByb2plY3RUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gICAgcHJvamVjdHNMaXN0ID0gW107XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucHJvamVjdHMgPSBbXTtcbiAgICB9XG5cbiAgICBsb2FkVGl0bGUoKSB7XG4gICAgICAgIHRoaXMucHJvamVjdFRpdGxlLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtdGl0bGUnKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0VGl0bGUudGV4dENvbnRlbnQgPSAnUHJvamVjdHMnO1xuICAgICAgICB0aGlzLm1haW5Db250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmJlZ2luJywgdGhpcy5wcm9qZWN0VGl0bGUpO1xuICAgIH1cblxuICAgIGxvYWRQcm9qZWN0Q29udGFpbmVycygpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9qZWN0IG9mIHRoaXMucHJvamVjdHNMaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBwcm9qZWN0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtY29udGFpbmVyJyk7XG4gICAgICAgICAgICBwcm9qZWN0Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LW5hbWUnLCBwcm9qZWN0KVxuICAgICAgICAgICAgdGhpcy50b2Rvc0NvbnRhaW5lci5hcHBlbmQocHJvamVjdENvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2FkVG9kb3NGb3JQcm9qZWN0KGFycikge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgdG9kbyBvZiBhcnIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvZG9Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHRvZG9Db250YWluZXIuY2xhc3NMaXN0LmFkZCgndG9kby1jb250YWluZXInKTtcbiAgICAgICAgICAgIHRvZG9Db250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXRvZG8taW5kZXgnLCBpKTtcbiAgICAgICAgICAgIGlmICh0b2RvLmNvbXBsZXRlID09PSB0cnVlKSB0b2RvQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2NvbXBsZXRlZCcpO1xuICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICAvL3RpdGxlXG4gICAgICAgICAgICBjb25zdCB0b2RvVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgICAgICAgICAgdG9kb1RpdGxlLmNsYXNzTGlzdC5hZGQoJ3RvZG8tdGl0bGUnKTtcbiAgICAgICAgICAgIHRvZG9UaXRsZS50ZXh0Q29udGVudCA9IHRvZG8udGl0bGU7XG5cbiAgICAgICAgICAgIC8vZGVzY3JpcHRpb25cbiAgICAgICAgICAgIGNvbnN0IHRvZG9EZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIHRvZG9EZXNjcmlwdGlvbi5jbGFzc0xpc3QuYWRkKCd0b2RvLWRlc2NyaXB0aW9uJyk7XG4gICAgICAgICAgICB0b2RvRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSB0b2RvLmRlc2NyaXB0aW9uO1xuXG4gICAgICAgICAgICAvL2RhdGVcbiAgICAgICAgICAgIGNvbnN0IHRvZG9EYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgdG9kb0RhdGUuY2xhc3NMaXN0LmFkZCgndG9kby1kYXRlJyk7XG4gICAgICAgICAgICB0b2RvRGF0ZS5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJkdWUtZGF0ZS1sYWJlbFwiPkR1ZSBEYXRlOiA8L3NwYW4+ICR7dG9kby5kdWVEYXRlLnNsaWNlKDUsIDcpfS8ke3RvZG8uZHVlRGF0ZS5zbGljZSg4LCAxMSl9LyR7dG9kby5kdWVEYXRlLnNsaWNlKDAsIDQpfWA7XG5cbiAgICAgICAgICAgIC8vdGltZVxuICAgICAgICAgICAgY29uc3QgdG9kb1RpbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICB0b2RvVGltZS5jbGFzc0xpc3QuYWRkKCd0b2RvLXRpbWUnKTtcbiAgICAgICAgICAgIGlmICh0b2RvLnRpbWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdG9kb1RpbWUuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwiZHVlLXRpbWUtbGFiZWxcIj5UaW1lIER1ZTogPC9zcGFuPiR7Zm9ybWF0VGltZSh0b2RvLnRpbWUpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2RvVGltZS5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJkdWUtdGltZS1sYWJlbFwiPlRpbWUgRHVlOiA8L3NwYW4+IE5vIFRpbWUgU2V0YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9wcm9qZWN0IHNlbGVjdGlvblxuICAgICAgICAgICAgY29uc3QgcHJvamVjdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJylcbiAgICAgICAgICAgIHByb2plY3RzLmNsYXNzTGlzdC5hZGQoJ3RvZG8tcHJvamVjdC1uYW1lJyk7XG4gICAgICAgICAgICBwcm9qZWN0cy5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJkdWUtZGF0ZS1sYWJlbFwiPlByb2plY3QgTmFtZTogPC9zcGFuPiAke3RvZG8ucHJvamVjdE5hbWV9YDtcblxuXG5cbiAgICAgICAgICAgIC8vY29tcGxldGlvbiBidXR0b25cbiAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgY29tcGxldGVkLnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKVxuICAgICAgICAgICAgY29tcGxldGVkLmNsYXNzTGlzdC5hZGQoJ2NvbXBsZXRlLWJ1dHRvbicpO1xuICAgICAgICAgICAgaWYgKHRvZG8uY29tcGxldGUgPT09IHRydWUpIGNvbXBsZXRlZC5jbGFzc0xpc3QuYWRkKCdjb21wbGV0ZWQnKTtcbiAgICAgICAgICAgICh0b2RvLmNvbXBsZXRlID09PSBmYWxzZSkgPyBjb21wbGV0ZWQudGV4dENvbnRlbnQgPSAnTm90IENvbXBsZXRlZCcgOiBjb21wbGV0ZWQudGV4dENvbnRlbnQgPSAnQ29tcGxldGVkJztcblxuICAgICAgICAgICAgLy9vcHRpb25zIG1lbnVcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnNNZW51Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBvcHRpb25zTWVudUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd0b2RvLW9wdGlvbnMnKTtcbiAgICAgICAgICAgIG9wdGlvbnNNZW51Q29udGFpbmVyLmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cIm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQgdG9kby1vcHRpb25zLWljb25cIj5tb3JlX3ZlcnQ8L3NwYW4+JztcblxuICAgICAgICAgICAgLy9vcHRpb25zXG4gICAgICAgICAgICBjb25zdCBvcHRpb25zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVUb2RvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICByZW1vdmVUb2RvLnRleHRDb250ZW50ID0gJ1JlbW92ZSc7XG4gICAgICAgICAgICByZW1vdmVUb2RvLmNsYXNzTGlzdC5hZGQoJ3JlbW92ZS10b2RvJyk7XG4gICAgICAgICAgICBvcHRpb25zQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3RvZG8tb3B0aW9ucy1jb250YWluZXInLCAnaGlkZGVuJyk7XG4gICAgICAgICAgICBvcHRpb25zQ29udGFpbmVyLmFwcGVuZChyZW1vdmVUb2RvKTtcblxuXG5cbiAgICAgICAgICAgIG9wdGlvbnNNZW51Q29udGFpbmVyLmFwcGVuZChvcHRpb25zQ29udGFpbmVyKTtcbiAgICAgICAgICAgIHRvZG9Db250YWluZXIuYXBwZW5kKHRvZG9UaXRsZSwgdG9kb0Rlc2NyaXB0aW9uLCB0b2RvRGF0ZSwgdG9kb1RpbWUsIHByb2plY3RzLCBjb21wbGV0ZWQsIG9wdGlvbnNNZW51Q29udGFpbmVyKTtcbiAgICAgICAgICAgIHRoaXMuYWRkVG9kb3NUb1Byb2plY3RDb250YWluZXJzKHRvZG8ucHJvamVjdE5hbWUsIHRvZG9Db250YWluZXIpO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRUb2Rvc1RvUHJvamVjdENvbnRhaW5lcnMocHJvamVjdE5hbWUsIHRvZG9Db250YWluZXIpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdENvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdC1jb250YWluZXInKTtcbiAgICAgICAgZm9yIChjb25zdCBjb250YWluZXIgb2YgcHJvamVjdENvbnRhaW5lcnMpe1xuICAgICAgICAgICAgICAgIGlmIChwcm9qZWN0TmFtZSA9PT0gY29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LW5hbWUnKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKHRvZG9Db250YWluZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICB9XG5cbn1cblxuXG4iXSwibmFtZXMiOlsiTWFpbkNvbnRlbnQiLCJjb250ZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibWFpbkNvbnRlbnRDb250YWluZXIiLCJ0b2Rvc2NvbnRhaW5lciIsImNvbnN0cnVjdG9yIiwibG9hZFRvZG9zIiwiYXJyIiwiaSIsInRoaXMiLCJpbm5lckhUTUwiLCJ0b2RvIiwidG9kb0NvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJjb21wbGV0ZSIsInRvZG9UaXRsZSIsInRleHRDb250ZW50IiwidGl0bGUiLCJ0b2RvRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsInRvZG9EYXRlIiwiZHVlRGF0ZSIsInNsaWNlIiwidG9kb1RpbWUiLCJ0aW1lIiwicHJvamVjdHMiLCJwcm9qZWN0TmFtZSIsImNvbXBsZXRlZCIsIm9wdGlvbnNNZW51Q29udGFpbmVyIiwib3B0aW9uc0NvbnRhaW5lciIsInJlbW92ZVRvZG8iLCJhcHBlbmQiLCJhZGRDb21wbGV0aW9uQnV0dG9uRXZlbnQiLCJjb21wbGV0aW9uQnV0dG9uIiwicXVlcnlTZWxlY3RvckFsbCIsImJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiY29udGFpbnMiLCJyZW1vdmUiLCJ0YXJnZXQiLCJwYXJlbnROb2RlIiwiZ2V0QXR0cmlidXRlIiwic2hvd1RvZG9PcHRpb25zIiwidG9kb09wdGlvbkJ1dHRvbiIsImNvbnNvbGUiLCJsb2ciLCJvcHRpb25zIiwiVG9EbyIsImxhbmRpbmdMb2FkZXIiLCJuYXYiLCJtYWluQ29udGVudCIsImRpbUJhY2tncm91bmQiLCJzdHlsZSIsImZpbHRlciIsInVuRGltQmFja2dyb3VuZCIsInJlbW92ZUF0dHJpYnV0ZSIsInRvZG9tb2RhbCIsIm1vZGFsQ29udGFpbmVyIiwidG9nZ2xlTW9kYWxWaXNpYmlsaXR5IiwidG9nZ2xlIiwib3Blbk1vZGFsIiwic3RvcFByb3BhZ2F0aW9uIiwiY2xvc2VNb2RhbCIsInJldmlld05vZGUiLCJleGl0Rm9ybSIsIm5vZGVOYW1lIiwibG9hZE1vZGFsQ29udGVudCIsInRhc2tEYXRlIiwiY3VycmVudERhdGUiLCJkYXRlIiwiRGF0ZSIsInllYXIiLCJnZXRGdWxsWWVhciIsImRheSIsImdldERhdGUiLCJtb250aCIsImdldE1vbnRoIiwidG9TdHJpbmciLCJsZW5ndGgiLCJnZXRDdXJyZW50RGF0ZSIsImNsZWFyTW9kYWxDb250ZW50IiwidmFsdWUiLCJtYWluQ29udGFpbmVyIiwidG9kb3NDb250YWluZXIiLCJwcm9qZWN0VGl0bGUiLCJwcm9qZWN0c0xpc3QiLCJsb2FkVGl0bGUiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJsb2FkUHJvamVjdENvbnRhaW5lcnMiLCJwcm9qZWN0IiwicHJvamVjdENvbnRhaW5lciIsImxvYWRUb2Rvc0ZvclByb2plY3QiLCJmb3JtYXRUaW1lIiwiYWRkVG9kb3NUb1Byb2plY3RDb250YWluZXJzIiwicHJvamVjdENvbnRhaW5lcnMiLCJjb250YWluZXIiLCJ0b2Rvc0xpc3QiLCJuZXdUb2RvQnV0dG9uIiwic3VibWl0VG9kb0J1dHRvbiIsInByb2plY3RzQnV0dG9uIiwicHJvamVjdFNlbGVjdGlvbiIsImhvbWVCdXR0b24iLCJyZXNldE5ld1RvZG9Qcm9qZWN0U2VsZWN0aW9uIiwicHJvamVjdE5hbWVDb250YWluZXIiLCJhZGRSZW1vdmVUb2RvTGlzdGVuZXIiLCJyZW1vdmVCdXR0b25zIiwidG9kb2luZGV4Iiwic3BsaWNlIiwid2luZG93IiwicHJvamVjdFRvZG9zIiwiYSIsImNoZWNrVmFsaWRpdHkiLCJwcmV2ZW50RGVmYXVsdCIsInB1c2giLCJpbmNsdWRlcyIsInJlcG9ydFZhbGlkaXR5Il0sInNvdXJjZVJvb3QiOiIifQ==